/*  Okapi JSON Parser  Copyright (C) 2009-2014 by the Okapi Framework contributors  -----------------------------------------------------------------------------  Licensed under the Apache License, Version 2.0 (the "License");  you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software  distributed under the License is distributed on an "AS IS" BASIS,  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.  Sections are taken from:   https://github.com/RobertFischer/json-parser  http://creativecommons.org/publicdomain/zero/1.0/  To the extent possible under law, Robert Fischer has waived all copyright  and related or neighboring rights to JSON Parser.   and   https://github.com/mwnorman/JSONParser/blob/master/src/org/mwnorman/json/JSONParser.jj  ISCL http://www.opensource.org/licenses/isc-license.txt  Copyright (c) 2011-2013 Mike Norman  Permission to use, copy, modify, and/or distribute this software for any  purpose with or without fee is hereby granted, provided that the above  copyright notice and this permission notice appear in all copies.   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY  SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER  RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,  NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE  USE OR PERFORMANCE OF THIS SOFTWARE.*/options{  GENERATE_ANNOTATIONS=true;   GENERATE_CHAINED_EXCEPTION=true;   SUPPORT_CLASS_VISIBILITY_PUBLIC=true;   GENERATE_GENERICS=true;   GENERATE_STRING_BUILDER=true;   UNICODE_INPUT=true;   JAVA_UNICODE_ESCAPE=true;   JDK_VERSION="1.7";   CHOICE_AMBIGUITY_CHECK = 3;  OTHER_AMBIGUITY_CHECK = 2;  ERROR_REPORTING = true;  IGNORE_CASE = false;  SANITY_CHECK = true;  STATIC = false;  KEEP_LINE_COLUMN = true;  CACHE_TOKENS = true;  JAVA_TEMPLATE_TYPE="modern";  //DEBUG_PARSER = true;  //DEBUG_LOOKAHEAD = true;  //DEBUG_TOKEN_MANAGER = true;}PARSER_BEGIN(JsonParser)package net.sf.okapi.filters.json.parser;import java.io.StringReader;import java.util.ArrayList;import java.util.List;/**
//* Basic JSON parser.
*/public class JsonParser{  private IJsonHandler handler = null;  private JsonValueTypes valueType = JsonValueTypes.DEFAULT;  public void setHandler(IJsonHandler handler)  {    this.handler = handler;  }  public void parse() throws ParseException  {    handler.handleStart();    json();    if (!ensureEOF()) throw new ParseException("Expected EOF, but still had content to parse");    handler.handleEnd();  }  public int getLine()  {    return jj_input_stream.line;  }  public int getColumn()  {    return jj_input_stream.column;  }  public void handleIgnorable(Token t)  {    List < Token > specialTokenList = getSpecialTokensBefore(t);    if (specialTokenList != null)    {      for (Token st : specialTokenList)      {        switch (st.kind)        {          case JsonParserConstants.C_SINGLE_COMMENT:          case JsonParserConstants.SH_SINGLE_COMMENT:            handler.handleComment(st.image);            break;          case JsonParserConstants.C_MULTILINE_COMMENT_END:            handler.handleComment(token_source.multiLineComment.toString());            token_source.multiLineComment.setLength(0);            break;                    case JsonParserConstants.HTML_MULTILINE_COMMENT_END:                      handler.handleComment("<!--"+st.image);            break;          case JsonParserConstants.WHITESPACE:            handler.handleWhitespace(st.image);            break;        }      }    }  }  private List < Token > getSpecialTokensBefore(Token t)  {    if (t.specialToken == null) return null;    List < Token > specialTokensList = new ArrayList < Token > ();    // The above statement determines that there are no special tokens    // and returns control to the caller.    Token tmp_t = t.specialToken;    while (tmp_t.specialToken != null) tmp_t = tmp_t.specialToken;    // The above line walks back the special token chain until it    // reaches the first special token after the previous regular    // token.    while (tmp_t != null)    {      specialTokensList.add(tmp_t);      tmp_t = tmp_t.next;    }    // The above loop now walks the special token chain in the forward    // direction    return specialTokensList;  }  private JsonKeyTypes getKeyType(Token nextToken)  {     switch (nextToken.kind)        {          case JsonParserConstants.BRACE_OPEN:            return JsonKeyTypes.OBJECT;          case JsonParserConstants.BRACKET_OPEN:            return JsonKeyTypes.LIST;          default:            return JsonKeyTypes.VALUE;        }  }  private static String substringBefore(String str, char delim)  {    int pos = str.indexOf(delim);    if (pos == - 1) return str;    return str.substring(0, pos);  }}PARSER_END(JsonParser)TOKEN_MGR_DECLS :{    int commentNesting = 0;    StringBuilder multiLineComment = new StringBuilder();}// comments: not really part of JSON spec, but parser shouldn't blow-up if presentSPECIAL_TOKEN :{//single-line 'C'-style comments< C_SINGLE_COMMENT: "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>//single-line Bash-style comments| < SH_SINGLE_COMMENT: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>//multi-line 'C'-style comments with counter for nesting| <C_MULTILINE_COMMENT_START: "/*" > { commentNesting++; multiLineComment.append("/*");} : WithinMLC//multi-line HTML comments (no nesting)| <HTML_MULTILINE_COMMENT_START: "<!--" > : WithinMLH}<WithinMLC> SPECIAL_TOKEN :{  "/*"  {    commentNesting++;    multiLineComment.append("/*");  }| < C_MULTILINE_COMMENT_END: "*/" >  {    commentNesting--;    multiLineComment.append("*/");    if (commentNesting == 0) {        SwitchTo(DEFAULT);    }  }}<WithinMLH> SPECIAL_TOKEN :{    < HTML_MULTILINE_COMMENT_END: "-->"> : DEFAULT}<WithinMLC> MORE :{    <~[]>    {      // since image contains the chars collected so far we      // just need the last char scanned      multiLineComment.append(image.charAt(image.length()-1));    }}<WithinMLH> MORE :{    <~[]>}SPECIAL_TOKEN :{  < #UNICODE_WHITESPACE : ["\u00a0", "\u1680", "\u180e", "\u2000"-"\u200b", "\u202f", "\u205f", "\u3000", "\ufeff"] > |  < WHITESPACE :    (      " "    | "\t"        | "\n"    | "\r"    | "\f"    |  <UNICODE_WHITESPACE>        )+ >}// Common tokens
TOKEN :{  < COMMA : "," >}// Object tokens
TOKEN :{  < BRACE_OPEN : "{" >| < BRACE_CLOSE : "}" >| < COLON : ":" >}// Array tokens
TOKEN :{  < BRACKET_OPEN : "[" >| < BRACKET_CLOSE : "]" >}// numeric literalsTOKEN:{  <#DOT: ".">| <#PLUS: "+">| <#MINUS: "-">| <#DIGIT: [    //Unicode "DIGIT" characters - more inclusive than Character.isDigit    "0"-"9", //DIGIT ZERO - DIGIT NINE    "\u0660"-"\u0669", //ARABIC-INDIC DIGIT ZERO -ARABIC-INDIC DIGIT NINE    "\u06f0"-"\u06f9", //EXTENDED ARABIC-INDIC DIGIT ZERO - EXTENDED ARABIC-INDIC DIGIT NINE    "\u07c0"-"\u07c9", //NKO DIGIT ZERO - NKO DIGIT NINE    "\u0966"-"\u096f", //DEVANAGARI DIGIT ZERO - DEVANAGARI DIGIT NINE    "\u09e6"-"\u09ef", //BENGALI DIGIT ZERO - BENGALI DIGIT NINE    "\u0a66"-"\u0a6f", //GURMUKHI DIGIT ZERO - GURMUKHI DIGIT NINE    "\u0ae6"-"\u0aef", //GUJARATI DIGIT ZERO - GUJARATI DIGIT NINE    "\u0b66"-"\u0b6f", //ORIYA DIGIT ZERO - ORIYA DIGIT NINE    "\u0be6"-"\u0bef", //TAMIL DIGIT ZERO - TAMIL DIGIT NINE    "\u0c66"-"\u0c6f", //TELUGU DIGIT ZERO - TELUGU DIGIT NINE    "\u0ce6"-"\u0cef", //KANNADA DIGIT ZERO - KANNADA DIGIT NINE    "\u0d66"-"\u0d6f", //MALAYALAM DIGIT ZERO - MALAYALAM DIGIT NINE    "\u0e50"-"\u0e59", //THAI DIGIT ZERO - THAI DIGIT NINE    "\u0ed0"-"\u0ed9", //LAO DIGIT ZERO - LAO DIGIT NINE    "\u0f20"-"\u0f29", //TIBETAN DIGIT ZERO - TIBETAN DIGIT NINE    "\u1040"-"\u1049", //MYANMAR DIGIT ZERO - MYANMAR DIGIT NINE    "\u1090"-"\u1099", //MYANMAR SHAN DIGIT ZERO - MYANMAR SHAN DIGIT NINE    "\u1369"-"\u1371", //ETHIOPIC DIGIT ZERO - ETHIOPIC DIGIT NINE    "\u17e0"-"\u17e9", //KHMER DIGIT ZERO - KHMER DIGIT NINE    "\u1810"-"\u1819", //MONGOLIAN DIGIT ZERO - MONGOLIAN DIGIT NINE    "\u1946"-"\u194f", //LIMBU DIGIT ZERO - LIMBU DIGIT NINE    "\u19d0"-"\u19d9", //NEW TAI LUE DIGIT ZERO - NEW TAI LUE DIGIT NINE    "\u1a80"-"\u1a89", //TAI THAM HORA DIGIT ZERO - TAI THAM HORA DIGIT NINE    "\u1a90"-"\u1a99", //TAI THAM THAM DIGIT ZERO - TAI THAM THAM DIGIT NINE    "\u1b50"-"\u1b59", //BALINESE DIGIT ZERO - BALINESE DIGIT NINE    "\u1bb0"-"\u1bb9", //SUNDANESE DIGIT ZERO - SUNDANESE DIGIT NINE    "\u1c40"-"\u1c49", //LEPCHA DIGIT ZERO - LEPCHA DIGIT NINE    "\u1c50"-"\u1c59", //OL CHIKI DIGIT ZERO - OL CHIKI DIGIT NINE    "\ua620"-"\ua629", //VAI DIGIT ZERO - VAI DIGIT NINE    "\ua8d0"-"\ua8d9", //SAURASHTRA DIGIT ZERO - SAURASHTRA DIGIT NINE    "\ua8e0"-"\ua8e9", //COMBINING DEVANAGARI DIGIT ZERO - COMBINING DEVANAGARI DIGIT NINE    "\ua900"-"\ua909", //KAYAH LI DIGIT ZERO - KAYAH LI DIGIT NINE    "\ua9d0"-"\ua9d9", //JAVANESE DIGIT ZERO - JAVANESE DIGIT NINE    "\uaa50"-"\uaa59", //CHAM DIGIT ZERO - CHAM DIGIT NINE    "\uabf0"-"\uabf9", //MEETEI MAYEK DIGIT ZERO - MEETEI MAYEK DIGIT NINE    "\uff10"-"\uff19" //FULLWIDTH DIGIT ZERO -FULLWIDTH DIGIT NINE	] >|   <#EXP: ["e", "E"] ( <PLUS> | <MINUS> )? >}// JSON numbers do not support octal or hexadecimal formatsTOKEN: {<NUMBER: (<INTEGER> <FRACTIONAL_DIGITS>) | (<INTEGER> <EXPONENT>) | (<INTEGER> <FRACTIONAL_DIGITS> <EXPONENT>) | <INTEGER> >| <#INTEGER: (<MINUS>)? ( <DIGITS> ) > //support leading zeros| <#FRACTIONAL_DIGITS: <DOT> <DIGITS> >| <#EXPONENT: <EXP> <DIGITS> >| <#DIGITS: ( <DIGIT> )+ >}// Boolean tokens
TOKEN :{  < TRUE : "true" >| < FALSE : "false" >}// Null token
TOKEN :{  < NULL : "null" >}TOKEN: { <SYMBOL: <LETTER> (<LETTER> | <DIGIT> | "_")* > | <#LETTER: [    //Unicode "LETTER" characters - as of Javase 6, Unicode 4 is supported    //http://www.unicode.org/Public/4.1.0/ucd/NamesList.txt    //more inclusive than Character.isLetter   "$", //DOLLAR SIGN: milreis, escudo   "A"-"Z", //LATIN CAPITAL LETTER A - LATIN CAPITAL LETTER Z   "_", //LOW LINE: spacing underscore   "a"-"z", //LATIN SMALL LETTER A - LATIN SMALL LETTER Z   "\u00aa"-"\u00ad", // 00AA FEMININE ORDINAL INDICATOR: spanish                      // 00AB LEFT-POINTING DOUBLE ANGLE QUOTATION MARK: left guillemet                      // 00AC NOT SIGN: angled dash                      // 00AD SOFT HYPHEN: discretionary hyphen   "\u00b5"-"\u00b6", // 00B5 MICRO SIGN: greek small letter mu                      // 00B6 PILCROW SIGN: paragraph sign   "\u00ba"-"\u00bb", // 00BA MASCULINE ORDINAL INDICATOR: spanish                      // 00BB RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK : right guillemet   "\u00c0"-"\u00d6", //LATIN CAPITAL LETTER A WITH GRAVE - LATIN CAPITAL LETTER O WITH DIAERESIS   "\u00d8"-"\u00f6", //LATIN CAPITAL LETTER O WITH STROKE - LATIN SMALL LETTER O WITH DIAERESIS   "\u00f8"-"\u00ff", //LATIN SMALL LETTER O WITH STROKE - LATIN SMALL LETTER Y WITH DIAERESIS   "\u0100"-"\u1fff", //LATIN CAPITAL LETTER A WITH MACRON - GREEK DASIA:reversed comma   "\u3040"-"\u318f", //Hiragana - Hangul   "\u3300"-"\u337f", //Squared Katakana   "\u3400"-"\u3d2d", //CJK Unified Ideographs Extension A   "\u4e00"-"\u9fff", //CJK Unified Ideographs   "\uf900"-"\ufaff", //CJK Compatibility Ideographs   "\ufb00"-"\ufb06", //LATIN SMALL LIGATURE FF -LATIN SMALL LIGATURE ST   "\ufb13"-"\ufb17", //ARMENIAN SMALL LIGATURE MEN NOW - ARMENIAN SMALL LIGATURE MEN XEH   "\ufb1f"-"\ufb28", //HEBREW LIGATURE YIDDISH YOD YOD PATAH -HEBREW LETTER WIDE TAV   "\ufb2a"-"\ufb36", //HEBREW LETTER SHIN WITH SHIN DOT - HEBREW LETTER ZAYIN WITH DAGESH   "\ufb38"-"\ufb3e", //HEBREW LETTER TET WITH DAGESH - HEBREW LETTER MEM WITH DAGESH   "\ufb40"-"\ufb41", //HEBREW LETTER NUN WITH DAGESH - HEBREW LETTER SAMEKH WITH DAGESH   "\ufb43"-"\ufb44", //HEBREW LETTER FINAL PE WITH DAGESH - HEBREW LETTER PE WITH DAGESH   "\ufb46"-"\ufb4f", //HEBREW LETTER TSADI WITH DAGESH - HEBREW LIGATURE ALEF LAMED   "\ufb50"-"\ufdd7", //Arabic Presentation Forms(A) - ARABIC LIGATURE BISMILLAH AR-RAHMAN AR-RAHEEM   "\ufdf0"-"\ufdfd", //ARABIC LIGATURE SALLA USED AS KORANIC STOP SIGN ISOLATED FORM -ARABIC LIGATURE BISMILLAH AR-RAHMAN AR-RAHEEM   "\ufe70"-"\ufefc", //Arabic Presentation Forms(B) - ARABIC LIGATURE LAM WITH ALEF FINAL FORM   "\uff1f"-"\uff3a", //FULLWIDTH QUESTION MARK - FULLWIDTH LATIN CAPITAL LETTER Z   "\uff3f"-"\uff5e", //FULLWIDTH LOW LINE - FULLWIDTH TILDE   "\uff61"-"\uffbe", //Halfwidth CJK punctuation:HALFWIDTH IDEOGRAPHIC FULL STOP - HALFWIDTH HANGUL LETTER HIEUH   "\uffc2"-"\uffc7", //HALFWIDTH HANGUL LETTER A - HALFWIDTH HANGUL LETTER E   "\uffca"-"\uffcf", //HALFWIDTH HANGUL LETTER YEO - HALFWIDTH HANGUL LETTER OE   "\uffd2"-"\uffd7", //HALFWIDTH HANGUL LETTER YO - HALFWIDTH HANGUL LETTER YU   "\uffda"-"\uffdc" //HALFWIDTH HANGUL LETTER EU - HALFWIDTH HANGUL LETTER I  ]>}// String tokens
TOKEN :{  < #QUOTE_DOUBLE : "\"" >| < #QUOTE_SINGLE : "'" >| < STRING_SINGLE_EMPTY : "''" >| < STRING_DOUBLE_EMPTY : "\"\"" >| < #STRING_SINGLE_BODY :    (      (~[ "'", "\\", "\r", "\n", "\f", "\t" ])    |      (        "\\"        (          "r"        | "n"        | "f"        | "\\"        | "/"        | "'"        | "b"        | "t"        )      )    )+ >| < #STRING_DOUBLE_BODY :    (      (~[ "\"", "\\", "\r", "\n", "\f", "\t" ])    |      (        "\\"        (          "r"        | "n"        | "f"        | "\\"        | "/"        | "\""        | "b"        | "t"        )      )    )+ >| < STRING_SINGLE_NONEMPTY : < QUOTE_SINGLE > < STRING_SINGLE_BODY > < QUOTE_SINGLE >>| < STRING_DOUBLE_NONEMPTY : < QUOTE_DOUBLE > < STRING_DOUBLE_BODY > < QUOTE_DOUBLE >>}boolean ensureEOF() :{}{  < EOF >  {    return true;  }}void json() :{}{  {    handleIgnorable(getToken(1));  }  (    object()  | list()  | value()  )  {    handleIgnorable(getToken(1));      }}void object() :{  String key;}{  < BRACE_OPEN >  {    handler.handleObjectStart();      }  [    key = objectKey()    {      handleIgnorable(token);      handler.handleKey(key, valueType, getKeyType(getToken(2)));      valueType = JsonValueTypes.DEFAULT;      handleIgnorable(getToken(1));          }        < COLON >    {      handler.handleSeparator(token.image);    }    json()        (            < COMMA >      {        handleIgnorable(token);                handler.handleSeparator(token.image);        handleIgnorable(getToken(1));      }      key = objectKey()      {        handler.handleKey(key, valueType, getKeyType(getToken(2)));        valueType = JsonValueTypes.DEFAULT;      }            < COLON >      {        handler.handleSeparator(token.image);      }      json()          )*  ]  < BRACE_CLOSE >  {    handler.handleObjectEnd();  }}void list() :{}{  < BRACKET_OPEN >  {    handler.handleListStart();  }  [    json()    (      < COMMA >      {                              handler.handleSeparator(token.image);      }      json()    )*  ]    < BRACKET_CLOSE >  {    handler.handleListEnd();  }}String objectKey() :{  String key;}{    (    key = string()  | key = symbol()  |    (      key = nullValue()    )  |    (      key = booleanValue()    | key = number()    )  )  {    return key;  }}void value() :{  String s;}{  (    s = number()  | s = booleanValue()  | s = nullValue()  | s = symbol()  | s = string()  )  {    handler.handleValue(s, valueType);    valueType = JsonValueTypes.DEFAULT;  }}String nullValue() :{}{  < NULL >  {    valueType = JsonValueTypes.NULL;    return token.image;  }}String booleanValue() :{}{  (    < TRUE >  | < FALSE >  )  {    valueType = JsonValueTypes.BOOLEAN;    return token.image;  }}String number() :{}{  < NUMBER >  {    valueType = JsonValueTypes.NUMBER;    return token.image;  }}String string() :{  String s;}{  (    s = doubleQuoteString()  | s = singleQuoteString()  )  {    return s;  }}String doubleQuoteString() :{ String value = "";  }{  ((< STRING_DOUBLE_EMPTY >  {    valueType = JsonValueTypes.DOUBLE_QUOTED_STRING;  }  )|  (    < STRING_DOUBLE_NONEMPTY >    {      valueType = JsonValueTypes.DOUBLE_QUOTED_STRING;      String image = token.image;      value = image.substring(1, image.length() - 1);    }  ))    { return value; }}String singleQuoteString() :{ String value = "";  }{  ((< STRING_SINGLE_EMPTY >  {    valueType = JsonValueTypes.SINGLE_QUOTED_STRING;  }  )|  (    < STRING_SINGLE_NONEMPTY >    {      valueType = JsonValueTypes.SINGLE_QUOTED_STRING;      String image = token.image;      value = image.substring(1, image.length() - 1);    }  ))    { return value; }}String symbol() :{}{  < SYMBOL >  {    valueType = JsonValueTypes.SYMBOL;    return token.image;  }}
